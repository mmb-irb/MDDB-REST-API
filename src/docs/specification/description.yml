openapi: 3.0.2
info:
  title: Federated API specification
  description:  >
    An API giving support to the corresponding endpoints and respecting the mandatory response format
    specifications should be compatible with the global MDDB node. Therefore its simulations could be
    included and displayed in the global API and web server. Every endpoint is marked as MANDATORY, a
    SHOULD or OPTIONAL.
    <br />
    <br />
    Note that these early guidelines may change in the near future.    
  version: 1.0.0

paths:
  /projects:
    get:
      summary: Get a list of projects
      description: >
        This endpoint allows to retrieve the whole list of projects through a pagination system.<br />
        Note that the pagination is mandatory to avoid a huge response and protect the API memory.
        **For the federated system:** when the global API asks a federated API for its projects it always 
        includes the "raw" argument thus asking for the project data as is in the database, not formatted.
        The response schema below corresponds to our internal format including all MDs.
        This endpoint is MANDATORY for the federated system.
      tags:
        - projects
      parameters:
        - name: limit
          in: query
          description: pagination, maximum number of projects per query
          schema:
            type: integer
            default: 10
            maximum: 100
        - name: page
          in: query
          description: pagination, page number
          schema:
            type: integer
            default: 1
        - name: raw
          in: query
          description: requests project data "as is" in the database, including all MDs
          required: true
          schema:
            type: boolean
            enum: [true]

      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                required: [ projects, filteredCount, totalCount ]
                properties:
                  projects:
                    type: array
                    description: an array of projects
                    items:
                      $ref: '#/components/schemas/InternalProject'
                  filteredCount:
                    type: integer
                    description: number of projects in the current response
                    example: 10
                  totalCount:
                    type: integer
                    description: number of projects which match the query
                    example: 250

  /projects/{projectAccessionOrID}:
    get:
      summary: Get a project by its accession or identifier.
      description: >
        Get a project (simulations and related data and analyses) by its accession or identifier.
        **For the federated system:** when the global API asks a federated API for its projects it always 
        includes the "raw" argument thus asking for the project data as is in the database, not formatted.
        The response schema below corresponds to our internal format including all MDs.
        This endpoint is MANDATORY for the federated system.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
        - name: raw
          in: query
          description: requests project data "as is" in the database, including all MDs
          schema:
            type: boolean
            enum: [true]
      tags:
        - projects
      responses:
        200:
          description: a project data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalProject'

  /projects/{projectAccessionOrID}/topology:
    get:
      summary: Get the simulation topology.
      description: >
        Get a json object containing data related to atom, residue and chains (e.g. atom names, residue numbers).
        This endpoint is MANDATORY for the federated system.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
      tags:
        - topology
      responses:
        200:
          description: JSON formatted topology
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'

  /projects/{projectAccessionOrID}/structure:
    get:
      summary: Get the main structure of the project in pdb format.
      description: >
        Get the main structure of the project in pdb format.
        Structure may be filtered by specific atoms.
        The POST method is also allowed to support long atom selections.
        This endpoint is MANDATORY for the federated system.
      produces:
        - chemical/x-pdb
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
        - name: selection
          in: query
          schema:
            type: string
          description: >
            Specify a NGL-formatted selection for the returned structure.<br>
            The user can request specific atoms instead of the whole file.<br>
            [See here for the kind of selection that can be used](http://nglviewer.org/ngl/api/manual/usage/selection-language.html).
          examples:
            allCAtoms:
              summary: All carbon atoms
              value: _C
            backbone:
              summary: Backbone atoms
              value: backbone
            allCInBackbone:
              summary: All carbon atoms in the backbone
              value: backbone and _C
      tags:
        - structure
      responses:
        200:
          description: a structure
          content:
            chemical/x-pdb:
              schema:
                type: string
                format: binary
        206:
          description: an atom filtered structure
          content:
            chemical/x-pdb:
              schema:
                type: string
                format: binary
    post:
      summary: Get the main structure of the project in pdb format (long atom selections allowed).
      description: >
        Get the main structure of the project in pdb format.
        Structure may be filtered by specific atoms.
        The POST method is also allowed to support long atom selections.
        This endpoint is MANDATORY for the federated system.
      produces:
        - chemical/x-pdb
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
        - name: selection
          in: query
          schema:
            type: string
          description: >
            Specify a NGL-formatted selection for the returned structure.<br>
            The user can request specific atoms instead of the whole file.<br>
            [See here for the kind of selection that can be used](http://nglviewer.org/ngl/api/manual/usage/selection-language.html).
          examples:
            allCAtoms:
              summary: All carbon atoms
              value: _C
            backbone:
              summary: Backbone atoms
              value: backbone
            allCInBackbone:
              summary: All carbon atoms in the backbone
              value: backbone and _C
      tags:
        - structure
      responses:
        200:
          description: a structure
          content:
            chemical/x-pdb:
              schema:
                type: string
                format: binary
        206:
          description: an atom filtered structure
          content:
            chemical/x-pdb:
              schema:
                type: string
                format: binary

  /projects/{projectAccessionOrID}/trajectory:
    get:
      summary: Get a complete or partial trajectory of the project.
      description: >
        Get a complete or partial trajectory of the project.
        The POST method is also allowed to support long atom and frame selections.
        Data is streamed from the first moment, no matter the format or selection of frames and atoms.
        Note that trajectories are huge files and they may take a lot of disk when downloaded.
        For a federated API to be compatible with the global node it must support the 'frames' argument
        and the binary format (bin) since the web client strongly relies on them.
        The rest of arguments and formats are optional.
        This endpoint is MANDATORY for the federated system.
      produces:
        - application/octet-stream
        - text/mdcrd
        - application/xtc
        - application/trr
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
        - name: format
          in: query
          schema:
            type: string
            enum: ['bin', 'mdcrd', 'xtc', 'trr']
          description: >
            Specify a request format for the trajectory file. When no format is specified,
            the default format is an internal binary format (bin) used by the web client.<br>
            Note that this is the only mandatory format to be supported by a federated API.
        - name: frames
          in: query
          schema:
            type: string
          description: >
            Specify a frame range for the returned trajectory.<br>
            The user can request only specific frames instead of the whole file.<br>
            Ranges are defined by dashes, and multiple ranges can be defined
            separated by commas. It can also be defined as the start:end:step
            format.<br>
            1-based numbering.
          required: true
          examples:
            firstFrame:
              summary: content of the first frame
              value: 1
            tenFrames:
              summary: ten frames, from two different ranges
              value: 1-5,11-15
            everyTwoFrames:
              summary: every two frames from frame 10 to frame 20
              value: 10:20:2
        - name: selection
          in: query
          schema:
            type: string
          description: >
            Specify a NGL-formatted selection for the returned trajectory.<br>
            The user can request specific atoms instead of the whole file.<br>
            [See here for the kind of selection that can be used](http://nglviewer.org/ngl/api/manual/usage/selection-language.html).
          examples:
            allCAtoms:
              summary: All carbon atoms
              value: _C
            backbone:
              summary: Backbone atoms
              value: backbone
            allCInBackbone:
              summary: All carbon atoms in the backbone
              value: backbone and _C
      tags:
        - trajectory
      responses:
        200:
          description: the main trajectory
          content:
            application/octet-stream:
              schema:
                $ref: '#/definitions/bin format'
            application/xtc:
              schema:
                $ref: '#/definitions/xtc format'
            application/trr:
              schema:
                $ref: '#/definitions/trr format'
            text/mdcrd:
              schema:
                $ref: '#/definitions/mdcrd format'
        206:
          description: a partial trajectory
          content:
            application/octet-stream:
              schema:
                $ref: '#/definitions/bin format'
            application/xtc:
              schema:
                $ref: '#/definitions/xtc format'
            application/trr:
              schema:
                $ref: '#/definitions/trr format'
            text/mdcrd:
              schema:
                $ref: '#/definitions/mdcrd format'
    post:
      summary: Get a complete or partial trajectory of the project (long atom and frame selections allowed).
      description: >
        Get a complete or partial trajectory of the project.
        The POST method is also allowed to support long atom and frame selections.
        Data is streamed from the first moment, no matter the format or selection of frames and atoms.
        Note that trajectories are huge files and they may take a lot of disk when downloaded.
        For a federated API to be compatible with the global node it must support the 'frames' argument
        and the binary format (bin) since the web client strongly relies on them.
        The rest of arguments and formats are optional.
        This endpoint is MANDATORY for the federated system.
      produces:
        - application/octet-stream
        - text/mdcrd
        - application/xtc
        - application/trr
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
        - name: format
          in: query
          schema:
            type: string
            enum: ['bin', 'mdcrd', 'xtc', 'trr']
          description: >
            Specify a request format for the trajectory file. When no format is specified,
            the default format is an internal binary format (bin) used by the web client.<br>
            Note that this is the only mandatory format to be supported by a federated API.
        - name: frames
          in: query
          schema:
            type: string
          description: >
            Specify a frame range for the returned trajectory.<br>
            The user can request only specific frames instead of the whole file.<br>
            Ranges are defined by dashes, and multiple ranges can be defined
            separated by commas. It can also be defined as the start:end:step
            format.<br>
            1-based numbering.
          required: true
          examples:
            firstFrame:
              summary: content of the first frame
              value: 1
            tenFrames:
              summary: ten frames, from two different ranges
              value: 1-5,11-15
            everyTwoFrames:
              summary: every two frames from frame 10 to frame 20
              value: 10:20:2
        - name: selection
          in: query
          schema:
            type: string
          description: >
            Specify a NGL-formatted selection for the returned trajectory.<br>
            The user can request specific atoms instead of the whole file.<br>
            [See here for the kind of selection that can be used](http://nglviewer.org/ngl/api/manual/usage/selection-language.html).
          examples:
            allCAtoms:
              summary: All carbon atoms
              value: _C
            backbone:
              summary: Backbone atoms
              value: backbone
            allCInBackbone:
              summary: All carbon atoms in the backbone
              value: backbone and _C
      tags:
        - trajectory
      responses:
        200:
          description: the main trajectory
          content:
            application/octet-stream:
              schema:
                $ref: '#/definitions/bin format'
            application/xtc:
              schema:
                $ref: '#/definitions/xtc format'
            application/trr:
              schema:
                $ref: '#/definitions/trr format'
            text/mdcrd:
              schema:
                $ref: '#/definitions/mdcrd format'
        206:
          description: a partial trajectory
          content:
            application/octet-stream:
              schema:
                $ref: '#/definitions/bin format'
            application/xtc:
              schema:
                $ref: '#/definitions/xtc format'
            application/trr:
              schema:
                $ref: '#/definitions/trr format'
            text/mdcrd:
              schema:
                $ref: '#/definitions/mdcrd format'
                  
  /projects/{projectAccessionOrID}/references:
    get:
      summary: Get the simulation references.
      description: >
        Get a data related to the project references including both proteins and ligands.
        This endpoint is OPTIONAL for the federated system.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
      tags:
        - references
      responses:
        200:
          description: JSON formatted topology
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/ProteinReference'
                    - $ref: '#/components/schemas/LigandReference'
                    - $ref: '#/components/schemas/PdbReference'

  /references/proteins:
    get:
      summary: Get all available protein reference UniProt IDs.
      description: >
        Get a list of UniProt IDs with an ID for each protein reference in the database.
        This endpoint is OPTIONAL for the federated system.
      tags:
        - references
      responses:
        200:
          description: List of UniProt IDs
          content:
            application/json:
              type: array
              items:
                type: string
              example:
                - P17427
                - P27870
                - Q01842

  /references/proteins/{UniProtID}:
    get:
      summary: Get a specific protein reference.
      description: >
        Get protein reference data for the specified UniProt ID.
        This endpoint is OPTIONAL for the federated system.
      tags:
        - references
      parameters:
        - $ref: '#/definitions/arguments/UniProtID'
      responses:
        200:
          description: Protein reference data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProteinReference'

  /references/ligands:
    get:
      summary: Get all available ligand reference PubChem IDs.
      description: >
        Get a list of PubChem IDs with an ID for each ligand reference in the database.
        This endpoint is OPTIONAL for the federated system.
      tags:
        - references
      responses:
        200:
          description: List of PubChem IDs
          content:
            application/json:
              type: array
              items:
                type: string
              example:
                - '444097'
                - '3033'
                - '3033'

  /references/ligands/{PubChemID}:
    get:
      summary: Get a specific ligand reference.
      description: >
        Get ligand reference data for the specified PubChem ID.
        This endpoint is OPTIONAL for the federated system.
      tags:
        - references
      parameters:
        - $ref: '#/definitions/arguments/PubChemID'
      responses:
        200:
          description: Ligand reference data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LigandReference'

  /references/pdb_refs:
    get:
      summary: Get all available PDB reference ids.
      description: >
        Get a list of PDB IDs with for each ligand reference in the database.
      tags:
        - references
      responses:
        200:
          description: List of PDB IDs
          content:
            application/json:
              type: array
              items:
                type: string
              example:
                - 12CA
                - 153L
                - 16PK

  /references/pdb_refs/{PDBID}:
    get:
      summary: Get a specific PDB reference.
      description: >
        Get ligand reference data for the specified PubChem ID.
      tags:
        - references
      parameters:
        - $ref: '#/definitions/arguments/PDBID'
      responses:
        200:
          description: PDB reference data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PdbReference'

  /projects/{projectAccessionOrID}/files:
    get:
      summary: Get the list of available files associated to the current project MD.
      description: >
        Get the list of files for a specific project MD.
        Files may be anything, in any format, with no size restriction.
        Files may include additional data to support some analyses, raw source files or other resources.
        For instance, the preview screenshot used by the web client is saved among the files as 'screenshot.jpg'.
        This endpoint is a SHOULD for the federated system.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
      tags:
        - files
      responses:
        200:
          description: the list of available files
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - screenshot.jpg
                  - structure.pdb

  /projects/{projectAccessionOrID}/files/{filename}:
    get:
      summary: Download a specific file.
      description: >
        Download a specific file for a specific project MD by its file name.
        This endpoint is a SHOULD for the federated system.
      produces:
        - application/octet-stream
        - chemical/x-pdb
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
        - name: filename
          in: path
          description: >
            filename, as defined in the list of files included in a project
          required: true
          schema:
            type: string
          example: structure.pdb
        - name: x
          in: query
          schema:
            type: string
          description: >
            This query parameter is only available in binary files (.bin).<br>
            Here we define 'x' as an example but it is possible to query as many
            dimensions as exist (x, y, z, w, ...).<br>
            Instead of the dimension letter you may query the dimension name with
            same results (e.g. instead of 'x' you can use 'bases' if the x dimensions
            belongs to bases). Dimension names can be obtained at the filenotes
            metadata.<br>
            Specify a range of values for the returned file.<br>
            The user can request only specific values instead of the whole file.<br>
            Ranges are defined by dashes, and multiple ranges can be defined
            separated by commas. It can also be defined as the start:end:step
            format.<br>
            1-based numbering.
          examples:
            firstFrame:
              summary: content of the first value
              value: 1
            tenFrames:
              summary: ten values, from two different ranges
              value: 1-5,11-15
            everyTwoFrames:
              summary: every two values from value 10 to value 20
              value: 10:20:2
        - name: parse
          in: query
          description: >
            This query parameter is only available in binary files (.bin).<br>
            Set if the file content is to be parsed.
          schema:
            type: boolean
            default: false
      tags:
        - files
      responses:
        200:
          description: a file
          content:
            chemical/x-pdb:
              schema:
                type: string
                format: binary

  /projects/{projectAccessionOrID}/filenotes:
    get:
      summary: Get file descriptors for every available file associated to the current project MD.
      description: >
        Get the list of file descriptors for a specific project MD.
        This endpoint is a SHOULD for the federated system.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
      tags:
        - filenotes
      responses:
        200:
          description: a list of file descriptors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileDescription'

  /projects/{projectAccessionOrID}/filenotes/{filename}:
    get:
      summary: Get a specific file descriptor.
      description: >
        Get a specific file descriptor for a specific project MD by its name.
        This endpoint is a SHOULD for the federated system.
      produces:
        - application/octet-stream
        - chemical/x-pdb
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
        - name: filename
          in: path
          description: Filename, as defined in the list of files included in a project
          required: true
          schema:
            type: string
          example: structure.pdb
      tags:
        - filenotes
      responses:
        200:
          description: a file descriptor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDescription'

  /projects/{projectAccessionOrID}/analyses:
    get:
      summary: Get the list of available analyses in a specific project.
      description: >
        Get a list with available analyses in a specific project.
        Analyses ara data formatted as an 'object', with a limit of 16 Mb.
        Data is organized differently for every different type of analysis.
        This endpoint is a SHOULD for the federated system.
        A federated API may mimic the name and format of any of the already supported analyses in the global web client.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
      tags:
        - analyses
      responses:
        200:
          description: a list of analyses
          content:
            application/json:
              schema:
                type: array
                description: list of available analyses
                items:
                  type: string
                example:
                  - pca
                  - rgyr
  /projects/{projectAccessionOrID}/analyses/{analysisName}:
    get:
      summary: Get an analysis for a project.
      description: >
        Get a specific analysis for a specific project by its name.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
        - name: analysisName
          in: path
          description: analysis name
          required: true
          schema:
            type: string
      tags:
        - analyses
      responses:
        200:
          description: an object containing analysis data
          content:
            application/json:
              example: No example is provided since each analysis is different. Look at the schemas

components:
  schemas:

    ProjectMetadata:
      type: object
      description: >
        Project metadata including structural feautures, MD parameters and external references.
      required: [ name ]
      properties:
        NAME:
          type: string
          example: My simulation
        DESCRIPTION:
          type: string
          example: My simulation was done like this...
        AUTHORS:
          type: array
          items:
            type: string
          example:
            - My name
            - My colleague's name
        GROUPS:
          type: array
          items:
            type: string
          example:
            - My group
            - My colleague's group
        CONTACT:
          type: string
          example: For any doubt please contact me at me@mymail.com
        LICENSE:
          type: string
          example: This trajectory dataset is released under a Creative Commons Attribution 4.0 International Public License
        LINKCENSE:
          type: string
          example: https://creativecommons.org/licenses/by/4.0/
        CITATION:
          type: string
          example: My related paper
        THANKS:
          type: string
          example: My acknowledgements
        LINKS:
          type: array
          items:
            type: object
        WARNINGS:
          type: array
          items:
            type: object
        COLLECTIONS:
          type: array
          items:
            type: string
          example:
            - My custom flag
            - My other custom flag
        PROGRAM:
          type: string
          example: GROMACS
        VERSION:
          type: string
          example: 2024.1
        TYPE:
          type: string
          enum: [ Trajectory, Ensemble ]
          example: Trajectory
        METHOD:
          type: string
          example: Classical MD
        FF:
          type: array
          items:
            type: string
          example:
            - Amber ff14SB
            - GLYCAM-06h
        WAT:
          type: string
          example: TIP3P
        FRAMESTEP:
          type: number
          description: Time between frames in nanoseconds (ns)
          example: 0.01
        TIMESTEP:
          type: number
          description: Time between steps during the simulation in femtoseconds (fs)
          example: 2
        TEMP:
          type: number
          description: Temperature in Kelvin (K)
          example: 300
        ENSEMBLE:
          type: string
          example: NPT
        BOXTYPE:
          type: string
          example: Octahedral
        BOXSIZEX:
          type: number
          example: 6.56936
        BOXSIZEY:
          type: number
          example: 6.19365
        BOXSIZEZ:
          type: number
          example: 5.36386
        SYSATS:
          type: number
          example: 10000
        PROTATS:
          type: number
          example: 8000
        PROT:
          type: number
          example: 100
        DPPC:
          type: number
          example: 0
        SOL:
          type: number
          example: 0
        NA:
          type: number
          example: 0
        CL:
          type: number
          example: 0
        PDBIDS:
          type: array
          items:
            type: string
          example:
            - 6vw1
            - 6vxx
        REFERENCES:
          type: array
          items:
            type: string
          example:
            - P0DTC2
            - Q9BYF1
        FORCED_REFERENCES:
          type: array
        LIGANDS:
          type: array
          items:
            type: string
          example:
            - 5870
            - 5757
        LIGANDNAMES:
          type: array
          items:
            type: string
          example:
            - My drug
            - My other drug
        INPUT_LIGANDS:
          type: array
        SEQUENCES:
          type: array
          items:
            type: string
          example:
            - DWGYDDKNGPEQWSKLYPIANGNNQSPVDIKTS
            - XXXXXXX
        INTERACTIONS:
          description: Interactions to be analyzed by the workflow
          type: array
          items:
            type: object
            required: [ name, agent_1, selection_1, agent_2, selection_2 ]
            parameters:
              - name: name
                description: Custom interaction title
                schema:
                  type: string
                  example: My interaction
              - name: agent_1
                description: Custom title for the first interacting agent
                schema:
                  type: string
                  example: My protein
              - name: selection_1
                description: Atom selection for the first interacting agent in VMD syntax
                schema:
                  type: string
                  example: chain A
              - name: agent_2
                description: Custom title for the second interacting agent
                schema:
                  type: string
                  example: My ligand
              - name: selection_2
                description: Atom selection for the second interacting agent in VMD syntax
                schema:
                  type: string
                  example: chain B
        PBC_SELECTION:
          description: Periodic Boundary Conditions atom selection
          type: string
          example: chain M
        CUSTOMS:
          description: Additional representations setup for the NGL viewer
          type: array
          items:
            type: object
        ORIENTATION:
          description: 10 numbers whcih are used by the NGL viewer to set the default camera orientation
          type: array
          items:
            type: number
        DOMAINS:
          type: array
          items:
            type: string
          example:
            - Carbonic anhydrase 1
            - Disordered
        PTM:
          type: array
          items:
            type: string
          example:
            - Acetylation
            - Glycosilation
        MULTIMERIC:
          type: array
          items:
            type: string
          example:
            - Monomer
            - Dimer
        MEMBRANES:
          description: Obsolete
          type: array
          items:
            type: object
        CV19_UNIT:
          type: string
          example: Spike
        CV19_STARTCONF:
          type: string
          example: Closed
        CV19_ABS:
          description: Antibody presence
          type: boolean
        CV19_NANOBS:
          description: Nanobody presence
          type: boolean
        CV19_VARIANT:
          type: string
          example: Omicron

    InternalProject:
      type: object
      description: >
        Main entry, metadata and available analyses or files for a specific project including all MDs
      required:
        - accession
        - published
        - metadata
        - mds
        - mdNumber
      properties:
        internalId:
          type: string
          pattern:
            $ref: '#/definitions/constants/IDPattern'
          example: 5d08b56e174bf85a17e00438
        accession:
          type: string
          description: >
            Unique and persistend id used to find the simulation.
          pattern:
            $ref: '#/definitions/constants/AccessionPattern'
          example: $ACCESSION
        identifier:
          type: string
          description: Deprecated identifier
        published:
          type: boolean
          description: >
            Set if the simulation is published
            This parameters is used by some nodes to show/hide their simulations
            This is mandatory for the project to be posited in the global node
        metadata:
          $ref: '#/components/schemas/ProjectMetadata'
        mds:
          type: array
          items:
            type: object
            description: >
              Every MD is an independent set of trajectory coordinates within the same Project.
              MDs in a same project share most metadata (e.g. replicas).
            required: [ name, frames ]
            properties:
              name:
                type: string
              metadata:
                type: object
              analyses:
                type: array
                description: >
                  List of available analyses in the current MD including both the name and the interal id of the document.
                items:
                  type: object
                  required: [ name ]
                  properties:
                    name:
                      type: string
                      description: name of the analysis
                      example: pca
                    id:
                      type: string
                      description: internal id of the analysis
                      example: 65afd5223837f199fe7671c1
                example:
                  - { name: pca, id: 65afd5223837f199fe7671c1 }
                  - { name: rgyr, id: 65afd5233837f199fe7671c3 }
              files:
                type: array
                description: >
                  List of available files in the current MD including both the name and the interal id of the document.
                items:
                  type: object
                  required: [ name ]
                  properties:
                    name:
                      type: string
                      description: name of the file
                      example: screenshot.jpg
                    id:
                      type: string
                      description: internal id of the file
                      example: 65afd5223837f199fe7671c1
                example:
                  - { name: screenshot.jpg, id: 65afd5223837f199fe7671c1 }
                  - { name: trajectory.bin, id: 65afd5233837f199fe7671c3 }
              frames:
                type: integer
              atoms:
                type: integer
              warnings:
                type: array
                items:
                  type: object
        mdref:
          type: integer
        mdNumber:
          type: integer
        mdIndex:
          type: integer
        analyses:
          type: array
          description: >
            List of available analyses in the current project both the name and the interal id of the document.
            (early implementation)
          items:
            type: object
            required: [ name ]
            properties:
              name:
                type: string
                description: name of the analysis
                example: pca
              id:
                type: string
                description: internal id of the analysis
                example: 65afd5223837f199fe7671c1
          example:
            - { name: pca, id: 65afd5223837f199fe7671c1 }
            - { name: rgyr, id: 65afd5233837f199fe7671c3 }
        files:
          type: array
          description: >
            List of available files in the project including both the name and the interal id of the document.
            The preview picture displayed in the MDposit browser is the file called 'screenshot.jpg'
          items:
            type: object
            required: [ name ]
            properties:
              name:
                type: string
                description: name of the file
                example: screenshot.jpg
              id:
                type: string
                description: internal id of the file
                example: 65afd5223837f199fe7671c1
          example:
            - { name: screenshot.jpg, id: 65afd5223837f199fe7671c1 }
            - { name: trajectory.bin, id: 65afd5233837f199fe7671c3 }
        chains:
          description: Project chain (about to be removed)

    Topology:
      description: Standard topology object
      type: object
      required: [ atom_names, atom_elements, atom_charges, atom_residue_indices,
        residue_names, residue_numbers, residue_icodes, residue_chain_indices, chain_names,
        references, reference_types, residue_reference_indices, residue_reference_numbers ]
      properties:
        atom_names:
          type: array
          description: A list containing the name of every atom in the topology
          items:
            type: string
            example:
              - 'N'
              - 'HN'
              - 'CA'
        atom_elements:
          type: array
          description: A list containing the element of every atom in the topology
          items:
            type: string
            example:
              - 'N'
              - 'H'
              - 'C'
        atom_charges:
          type: array
          description: A list containing the charge of every atom in the topology
          items:
            type: float
            example:
              - 0.09
              - 0.51
              - -0.51
        atom_residue_indices:
          type: array
          description: A list containing the residue index of every atom in the topology
          items:
            type: int
            example:
              - 0
              - 0
              - 1
        atom_bonds:
          type: array
          description: A list containing atom indices of other atoms bonded to the current one
          items:
            type: array
            example:
              - [ 1, 2, 3 ]
              - [ 3, 4 ]
        residue_names:
          type: array
          description: A list containing the name of every residue in the topology
          items:
            type: string
            example:
              - 'SER'
              - 'THR'
              - 'ARG'
        residue_numbers:
          type: array
          description: A list containing the number of every residue in the topology
          items:
            type: int
            example:
              - 17
              - 18
              - 345
        residue_icodes:
          type: object
          description: >
            An object containing the residue icodes in the topology.
            Keys are residue indices and values are icodes.
            It is null when there are no icodes at all.
          example: { '0' : 'A', '17': 'B' }
        residue_chain_indices:
          type: array
          description: A list containing the chain index of every residue in the topology
          items:
            type: int
            example:
              - 0
              - 0
              - 1
        chain_names:
          type: array
          description: A list containing the name of every chain in the topology
          items:
            type: string
            example:
              - 'A'
              - 'B'
              - 'X'
        references:
          type: array
          description: >
            A list containing the reference ids of every reference used.
            They may be UniProt ids for proteins or PubChem ids for ligands
            Protein references are used to numerate residues in the topology according to the standards.
            Both protein and ligand references are used to label residues in the web client.
          items:
            type: string
            example:
              - "P00915"
              - "1986"
        reference_types:
          type: array
          description: >
            Set the type of reference for every reference in the 'references' array
          items:
            type: string
            enum: [ protein, ligand ]
            example:
              - protein
              - ligand
        residue_reference_indices:
          type: array
          description: A list containing the reference index of every residue in the topology
          items:
            type: int
            example:
              - 0
              - 0
              - 1
        residue_reference_numbers:
          type: array
          description: A list containing the reference number of every residue in the topology
          items:
            type: int
            example:
              - 17
              - 18
              - 345

    ProteinReference:
      type: object
      required:
        - uniprot
        - sequence
        - name
        - gene
        - organism
      properties:
        uniprot:
          description: UniProt id
          type: string
          example: P0DTC2
        sequence:
          description: Amino acids sequence
          type: string
          example: MFVFLVLLPLVSSQCVNLTTRTQL…GSCCKFDEDDSEPVLKGVKLHYT
        name:
          description: UniProt name
          type: string
          example: Spike glycoprotein
        gene:
          description: UniProt gene name
          type: string
          example: S
        organism:
          description: UniProt organism
          type: string
          example: Severe acute respiratory syndrome coronavirus 2
        domains:
          description: UniProt domains
          type: array
          items:
            type: object
          example: [
            { name: Some specific domain, selection: 14-685, description: This domain is important because... }
          ]
        functions:
          description: UniProt functions
          type: array
          items:
            type: string
          example:
            - host cell surface receptor binding
            - identical protein binding
        entropies:
          description: Residue mutation rate according to GISAID data (covid-19 spike systems only)
          type: array
          items:
            type: number
        epitopes:
          description: Known epitopes according to the PDB (covid-19 spike systems only)
          type: array
          items:
            type: object

    LigandReference:
      type: object
      required:
        - name
        - pubchem
        - smiles
        - formula
        - mordred
        - morgan
      properties:
        pubchem:
          description: PubChem id
          type: string
          example: "1986"
        drugbank:
          description: DrugBank id
          type: string
          example: DB00819
        chembl:
          description: ChEMBL id
          type: string
          example: CHEMBL20 
        name:
          description: One of the accepted ligand names according to PubChem
          type: string
          example: acetazolamide
        smiles:
          description: Simplified Molecular Input Line Entry System (SMILES)
          type: string
          example: CC(=O)NC1=NN=C(S1)S(=O)(=O)N
        formula:
          description: Information about the proportions of atoms
          type: string
          example: C4H6N4O3S2
        mordred:
          description: Results from the molecular descriptor calculator (https://github.com/mordred-descriptor/mordred)
          type: object
        morgan:
          description: Morgan fingerprint
          type: array
          items:
            type: integer

    PdbReference:
      type: object
      required:
        - id
        - title
        - class
        - authors
        - date
        - organism
        - method
        - resolution
        - chain_uniprots
      properties:
        id:
          description: PDB id
          type: string
          example: 12CA
        title:
          description: Name of the PDB entry
          type: string
          example: Altering the mouth of a hydrophobic pocket...
        class:
          description: PDB classification
          type: string
          example: Lyase(oxo-acid)
        authors:
          description: List of authors
          type: array
          items:
            type: string
          example:
            - CHRISTIANSON, D.W.
            - NAIR, S.K.
        date:
          description: Publication date
          type: string
          example: 10/01/91
        organism:
          description: Source organism
          type: string
          example: Homo sapiens
        method:
          description: Experimental method
          type: string
          example: X-RAY DIFFRACTION
        resolution:
          description: Experimental resolution
          type: float
          example: 2.4
        chain_uniprots:
          description: Uniprot Id of every chain
          type: object
          example:
            A: P00918

    FileDescription:
      type: object
      required: [ length, filename ]
      properties:
        length:
          type: integer
          description: length in bytes
          example: 368194
        filename:
          type: string
          example: structure.pdb
        md5:
          type: string
          pattern: '^[0-9a-f]{32}$'
          example: 79ac468d3cc434ad777048b51e65afc3
        contentType:
          type: string
          example: chemical/x-pdb
        metadata:
          type: object

definitions:
  constants:
    IDPattern: '^[a-fA-F\d]{24}$'
    AccessionPattern: 'Free'
  arguments:
    projectAccessionOrID:
      name: projectAccessionOrID
      in: path
      description: >
        Project accession or identifier.<br>
        A project will always have a unique identifier (even if unpublished and
        in the development version of the API).<br>
        When published, it will be assigned a never-changing unique
        user-friendly accession.<br>
        You can use either to access the corresponding data, even if the
        **accession is recommended**
      required: true
      schema:
        type: string
    UniProtID:
      name: UniProtID
      in: path
      description: >
        UniProt accession ID
      required: true
      schema:
        type: string
      example: Q9BYF1
    PubChemID:
      name: PubChemID
      in: path
      description: >
        PubChem accession ID
      required: true
      schema:
        type: string
      example: "1986"
    PDBID:
      name: PDBID
      in: path
      description: >
        PDB accession ID
      required: true
      schema:
        type: string
      example: 12CA
  bin format:
    type: string
    format: binary
    description: >
      Binary float32 coordinates in a row and nothing else.
      There is no separator between frames or atoms or x, y and z coordinates.
    example: <binary>
  mdcrd format:
    type: string
    format: text
    description: >
      ASCII format including coordinates separated by white spaces.<br>
      Every row includes 10 coordinates.
    example: > # Los breaks tipo /n o <br /> no funcionan aquí, el breakline entre título y coordenadas hace que se vea bien
      Node name - Accession id

        42.750  43.800  52.570  43.330  44.600  52.780  42.390  43.540  53.480  42.050
        43.930  51.850  43.650  42.720  52.080  44.490  42.640  52.780  42.940  41.360
        52.070  43.620  40.580  51.720  42.650  41.110  53.090  41.720  41.240  51.140
        40.490  41.780  51.370  40.110  42.220  52.280  39.760  41.800  50.170  38.840
        42.200  50.050  40.450  41.270  49.130  40.130  41.140  47.810  39.140  41.330
  xtc format:
    type: string
    format: binary
    description: Gromacs format (compressed). Specification at https://manual.gromacs.org/archive/5.0.4/online/xtc.html
    example: <binary>
  trr format:
    type: string
    format: binary
    description: Gromacs format. Specification at https://manual.gromacs.org/archive/5.0.4/online/trr.html
    example: <binary>
